Below is a complete Arduino-style sketch for the NodeMCU (ESP8266) that:

1. Connects to your Wi-Fi network.
2. Reads a DHT11 temperature/humidity sensor.
3. Reads a PIR motion sensor.
4. (Optionally) Posts the readings via HTTP POST to a REST endpoint.

You can adapt the HTTP section (URL/JSON payload) to fit whatever backend your CraneSmart system uses. If you only need to print to Serial, simply comment out or remove the HTTP part.

---

```cpp
/*
  Filename: CraneSmart_SensorLogger.ino

  Purpose:
    ‚Ä¢ Connect NodeMCU (ESP8266) to Wi-Fi.
    ‚Ä¢ Read temperature & humidity from a DHT11.
    ‚Ä¢ Read motion state from a PIR sensor.
    ‚Ä¢ Print results to Serial, and optionally send via HTTP POST.

  Hardware:
    ‚Ä¢ NodeMCU (ESP8266)
    ‚Ä¢ DHT11 (or DHT22) connected to D4 (GPIO2)
    ‚Ä¢ PIR motion sensor connected to D5 (GPIO14)
    ‚Ä¢ (Optional) Backend server to receive JSON via HTTP.

  Wiring:
    ‚Ä¢ DHT11:
        VCC ‚Üí 3V3
        GND ‚Üí GND
        DATA ‚Üí D4 (GPIO2)
        (10K pull-up resistor between DATA and 3V3 if your module doesn‚Äôt have one built in)
    ‚Ä¢ PIR:
        VCC ‚Üí 5V (or 3V3 if module is 3.3V-compatible)
        GND ‚Üí GND
        OUT ‚Üí D5 (GPIO14)

  Libraries needed:
    ‚Ä¢ ESP8266WiFi
    ‚Ä¢ ESP8266HTTPClient
    ‚Ä¢ DHT sensor library by Adafruit
      (Install via Library Manager: ‚ÄúDHT sensor library‚Äù by Adafruit)

  Usage:
    ‚Ä¢ Fill in your SSID/PASSWORD.
    ‚Ä¢ (Optional) Adjust serverURL if you want to POST data.
    ‚Ä¢ Upload to NodeMCU using Arduino IDE or PlatformIO.
*/

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <DHT.h>

// ‚Äî‚Äî CONFIGURATION ‚Äî‚Äî

// 1) Wi-Fi credentials
const char* ssid     = "YOUR_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// 2) DHT sensor settings
#define DHTPIN        D4      // NodeMCU D4 (GPIO2)
#define DHTTYPE       DHT11   // 'DHT11' or 'DHT22'
DHT dht(DHTPIN, DHTTYPE);

// 3) PIR motion sensor pin
const uint8_t PIR_PIN = D5;   // NodeMCU D5 (GPIO14)

// 4) (Optional) HTTP server endpoint to POST JSON:
const char* serverURL = "http://your-server.com/api/sensor-data";


// ‚Äî‚Äî SETUP ‚Äî‚Äî 
void setup() {
  Serial.begin(115200);
  delay(10);
  Serial.println();
  Serial.println("üü¢ CraneSmart Sensor Logger Starting...");

  // Initialize DHT sensor
  dht.begin();
  Serial.println("‚Ä¢ DHT initialized on pin D4 (GPIO2)");

  // Initialize PIR pin
  pinMode(PIR_PIN, INPUT);
  Serial.println("‚Ä¢ PIR initialized on pin D5 (GPIO14)");

  // Connect to Wi-Fi
  Serial.printf("‚è≥ Connecting to Wi-Fi SSID: %s\n", ssid);
  WiFi.begin(ssid, password);

  uint8_t attempts = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    attempts++;
    if (attempts >= 30) { 
      Serial.println("\n‚ùå Failed to connect to Wi-Fi. Check credentials.");
      break;
    }
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ Wi-Fi connected!");
    Serial.print("‚Ä¢ IP address: ");
    Serial.println(WiFi.localIP());
  }
}

// ‚Äî‚Äî MAIN LOOP ‚Äî‚Äî 
void loop() {
  // 1) Read DHT11
  float h = dht.readHumidity();
  float t = dht.readTemperature(); // Celsius
  // If you want Fahrenheit: dht.readTemperature(true);

  // Check if any reads failed
  if (isnan(h) || isnan(t)) {
    Serial.println("‚ö†Ô∏è Failed to read from DHT sensor!");
  } else {
    Serial.printf("üå°Ô∏è Temperature: %.1f ¬∞C, üíß Humidity: %.1f %%\n", t, h);
  }

  // 2) Read PIR motion sensor
  int motionState = digitalRead(PIR_PIN);
  if (motionState == HIGH) {
    Serial.println("üîî Motion detected!");
  } else {
    Serial.println("‚Ä¶No motion");
  }

  // 3) (Optional) Send data via HTTP POST
  if (WiFi.status() == WL_CONNECTED) {
    sendSensorData(t, h, motionState);
  } else {
    Serial.println("‚ö†Ô∏è Wi-Fi not connected. Skipping HTTP POST.");
  }

  // 4) Wait before next reading
  delay(10000); // e.g., 10 seconds
}


// ‚Äî‚Äî HELPER FUNCTION: Send JSON via HTTP POST ‚Äî‚Äî 
void sendSensorData(float temperature, float humidity, int motion) {
  HTTPClient http;

  // Prepare JSON payload
  String payload = "{";
  payload += "\"temperature\": " + String(temperature, 1) + ",";
  payload += "\"humidity\": " + String(humidity, 1) + ",";
  payload += "\"motion\": " + String(motion);
  payload += "}";

  http.begin(serverURL);            // Specify destination
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(payload);
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.printf("üì§ HTTP %d Response: %s\n", httpResponseCode, response.c_str());
  } else {
    Serial.printf("‚ùå HTTP POST failed, error: %s\n", http.errorToString(httpResponseCode).c_str());
  }
  http.end(); // Free resources
}
```

### Explanation & Customization

1. **Libraries & Pins**

   * `ESP8266WiFi.h` and `ESP8266HTTPClient.h` let the NodeMCU connect to Wi-Fi and send HTTP requests.
   * `DHT.h` (Adafruit‚Äôs library) handles reading temperature/humidity from the DHT11 (or DHT22).
   * We wired the DHT data line to **D4 (GPIO2)** and the PIR output to **D5 (GPIO14)**.

2. **Wi-Fi Connection**

   * Fill in `ssid` and `password`.
   * The sketch attempts to connect for up to \~15 seconds (30√ó500 ms loops).
   * Once connected, it prints the local IP to Serial.

3. **Reading Sensors**

   * **DHT**: `dht.readTemperature()` and `dht.readHumidity()` return floats.
     If they return `NaN`, the read failed.
   * **PIR**: A simple digital read (`HIGH` means motion detected).

4. **HTTP POST (Optional)**

   * If `WiFi.status() == WL_CONNECTED`, the code builds a small JSON payload:

     ```json
     {
       "temperature": 23.5,
       "humidity": 45.2,
       "motion": 1
     }
     ```
   * It POSTS to the URL in `serverURL`.
   * Adjust `serverURL` to point at your backend API.
   * You can modify headers, add authentication tokens, or change the payload shape as needed.

5. **Timing**

   * After reading & posting, the code waits `delay(10000)` (10 seconds) before looping. Adjust as desired.

---

### How to Install & Upload

1. **Install Arduino IDE** (or use PlatformIO).
2. **Add ESP8266 Board Support**

   * In Arduino IDE:

     1. **File ‚Üí Preferences** ‚Üí in ‚ÄúAdditional Boards Manager URLs‚Äù, paste:

        ```
        http://arduino.esp8266.com/stable/package_esp8266com_index.json
        ```
     2. **Tools ‚Üí Board ‚Üí Boards Manager‚Ä¶** ‚Üí search ‚Äúesp8266‚Äù ‚Üí Install ‚Äúesp8266 by ESP8266 Community‚Äù.
3. **Install the DHT Library**

   * **Sketch ‚Üí Include Library ‚Üí Manage Libraries‚Ä¶** ‚Üí search ‚ÄúDHT sensor library‚Äù ‚Üí install the one by Adafruit.
4. **Select Board & Port**

   * **Tools ‚Üí Board ‚Üí NodeMCU 1.0 (ESP-12E Module)**
   * **Tools ‚Üí Port ‚Üí your NodeMCU‚Äôs COM port**
5. **Copy & Paste** the above sketch into a new Arduino window, update your Wi-Fi credentials (and optionally `serverURL`), then click **Upload**.

   After uploading, open **Serial Monitor** (baud 115200) to see connection logs and sensor readings.

---

### Integrating with CraneSmart

* If your CraneSmart backend expects sensor data at a particular endpoint (e.g., `/api/telemetry`), adjust `serverURL`.
* On the backend side, parse the JSON fields `"temperature"`, `"humidity"`, and `"motion"`. Save into your database or feed into your predictive‚Äêmaintenance pipeline.
* You can add more sensors (vibration, load cell, etc.) by wiring them to available GPIOs/A0 and extending the code to read and POST additional fields.

---

With this sketch, your NodeMCU will continuously monitor temperature and motion, printing values to Serial and pushing JSON payloads to your server. Feel free to expand on it‚Äîadd error‚Äêchecks, OTA updates, or MQTT instead of HTTP if that‚Äôs your preferred protocol.
